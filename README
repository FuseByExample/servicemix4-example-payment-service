This project is an example of using OSGi, Camel, and ServiceMix together,
specifically ServiceMix 4's NMR component. A number of things are shown within
this project:
 * use of the Camel-NMR component for inter OSGi bundle communication
 * dynamic routing combining Camel's recipient list and the OSGi Service Registry
 * use of Camel's Content Based Router
 * multiple front-end proxies (WS and batch file)
 * bridging one way (fire and forget) messaging with request-response
 * and much more...

The scenario is a payment transfer service where transfer requests can be made
either through a WS (SOAP/HTTP) interface or through batch files. These transfer
requests are routed to banking services that can come and go at runtime (i.e. new
banks can be added and removed at runtime).

This solution is a bit over-engineered, but the goal of this effort is to provide
examples of best practices in creating applications using these technologies.
Following is a brief overview of the included modules. I'll be trying to blog in
more detail about why parts of this solution were created this way.

http://scottcranton.blogspot.com/

Module Overview:
* payment-service-shared: contains wsdl and generated JAXB artifacts, providing
  a common data model for data moving through the system
* payment-service-router: does Content Based Routing on the transfer request to
  send to the right back-end back service for processing. This bundle also provides
  an implementation of the listing service that interrogates the OSGi Service
  Registry to show what bank services are available.
* payment-service-bank{1,2}: process the transfer request
* payment-service-ws: SOAP/HTTP request-response proxy for transfer service
* payment-service-batch: splits multiple requests within a file, and forwards
  them to the router. Adapts a one-way process (batch file) to a request-response
  service (transfer).

Requirements:
* ServiceMix 4.3.1-fuse-00-00 (http://fusesource.com/downloads/)
* Maven 2.2.1 or 3.0 (http://maven.apache.org/)
* Java SE 6

To run:
1) Build this project so bundles are deployed into your local maven repo

<project home> $ mvn clean install

2) Start ServiceMix

<ServiceMix home> $ bin/servicemix

3) Add this projects features.xml config to ServiceMix from the ServiceMix Console
   (makes it easier to install bundles with all required dependencies)

karaf@root> features:addUrl mvn:com.fusesource.examples/payment-service-shared/1.0.0-SNAPSHOT/xml/features


4) Install the bundles.

   Note: payment-service-shared gets installed by the other features.

karaf@root> features:install payment-service-router
karaf@root> features:install payment-service-bank1
karaf@root> features:install payment-service-bank2
karaf@root> features:install payment-service-ws
karaf@root> features:install payment-service-batch

5) To test the batch file processing, there is an existing batch file in the
   payment-service-batch modules.

   Note: <ServiceMix Home>/tmp/file-in directory is created automatically by
         Camel within the payment-service-batch bundle.

<project home> $ cp payment-service-batch/transfers.xml <ServiceMix Home>/tmp/file-in

   To see what happened look at the ServiceMix log file, either from the console

karaf@root> log:display

   or from the command line

<ServiceMix home> $ tail -f data/log/servicemix.log

6) To test the WS, use your favorite WS tool (e.g. SoapUI) against the following
   WSDLs hosted by the payment-service-ws bundle.
   * http://localhost:9090/listingService?WSDL
   * http://localhost:9090/paymentService?WSDL

